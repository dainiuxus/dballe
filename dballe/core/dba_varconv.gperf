%define slot-name tag
%define lookup-function-name get_varconv
%compare-strncmp
%struct-type
/* Using %switch may be faster (remember to check when doing optimizations) */

%{
#include <stdio.h>
#include <string.h>
#include "dba_varconv.h"
%}

/* Note: the _ref member of info is always set to 1 to avoid the structure
 * being deallocated from dba_varinfo_delete */
struct varconv { const char* tag; dba_varcode var; };
/*
! B00001, B01001
! B01001, B02001
*/
/*
  The conversion table follows.  It gets preprocessed by a Perl script so that
  human-readable varcode representations can be used.  The initial exclamation
  mark is used to mark lines to be processed by compile_varconv.

  The syntax is:
  ! B12345, B32123
  or
  ! B12345,

  In the first case, the variable B12345 found in a CREX of BUFR message will
  be converted to the local variable B32123.
  In the second case, the variable B12345 found in a CREX of BUFR message will
  be ignored.  FIXME: is is possible to ignore it?
*/
%%
! B01192,
! B01193,
! B02116,
! B02117,
! B02118,
! B02119,
! B02156,
! B02157,
! B02158,
! B02159,
! B02160,
! B02174,
! B02192,
! B02193,
! B02194,
! B02195,
! B02201,
! B02202,
! B02220,
! B02223,
! B02240,
! B02241,
! B02242,
! B02243,
! B02244,
! B02245,
! B05193,
! B05194,
! B05195,
! B05217,
! B05232,
! B06193,
! B06194,
! B06217,
! B06232,
! B07190,
! B07217,
! B08019,
! B08029,
! B08059,
! B08193,
! B08194,
! B08195,
! B08200,
! B08222,
! B08223,
! B08224,
! B10032,
! B10033,
! B10034,
! B10064,
! B10080,
! B10081,
! B10082,
! B10083,
! B10084,
! B10085,
! B10086,
! B10087,
! B10088,
! B10089,
! B10090,
! B10091,
! B10092,
! B10093,
! B10195,
! B10196,
! B11095,
! B11096,
! B11192,
! B11193,
! B11194,
! B11195,
! B11196,
! B11201,
! B11210,
! B11211,
! B11220,
! B11221,
! B12180,
! B12181,
! B12182,
! B12183,
! B12184,
! B12185,
! B12186,
! B12187,
! B12188,
! B12189,
! B12197,
! B12198,
! B12199,
! B12200,
! B13093,
! B13095,
! B13096,
! B13097,
! B13098,
! B13192,
! B13193,
! B13194,
! B13195,
! B13196,
! B13197,
! B13198,
! B13199,
! B13201,
! B13202,
! B13203,
! B13204,
! B13205,
! B13206,
! B13207,
! B13208,
! B13209,
! B13210,
! B13211,
! B13212,
! B13230,
! B13231,
! B13233,
! B13240,
! B14055,
! B15202,
! B20028,
! B20193,
! B20194,
! B20215,
! B20250,
! B20251,
! B20252,
! B20253,
! B20254,
! B21086,
! B21087,
! B21130,
! B21131,
! B21132,
! B21133,
! B21134,
! B21135,
! B21136,
! B21137,
! B21138,
! B21139,
! B21140,
! B21141,
! B21142,
! B21143,
! B21144,
! B21196,
! B21197,
! B21198,
! B21199,
! B21200,
! B21201,
! B21202,
! B21203,
! B21204,
! B21205,
! B21206,
! B21207,
! B21208,
! B21209,
! B21210,
! B21211,
! B21212,
! B21213,
! B21214,
! B21215,
! B21222,
! B21225,
! B21226,
! B21230,
! B21231,
! B21232,
! B21233,
! B21234,
! B21235,
! B21236,
! B21237,
! B21238,
! B21239,
! B21240,
! B21241,
! B21242,
! B21243,
! B21244,
! B22150,
! B22151,
! B22152,
! B22153,
! B22154,
! B22155,
! B22156,
! B22157,
! B22158,
! B22159,
! B22160,
! B22161,
! B22192,
! B22193,
! B22194,
! B22195,
! B22196,
! B22197,
! B22198,
! B22199,
! B22200,
! B22201,
! B22202,
! B22203,
! B22204,
! B22205,
! B22206,
! B22207,
! B22208,
! B22209,
! B22210,
! B22211,
! B22243,
! B25050,
! B25102,
! B25103,
! B25104,
! B25105,
! B25106,
! B25107,
! B25108,
! B25110,
! B25111,
! B25120,
! B25121,
! B25122,
! B25123,
! B25124,
! B25125,
! B25126,
! B25127,
! B25128,
! B25129,
! B25130,
! B25131,
! B25132,
! B25133,
! B25134,
! B25135,
! B25136,
! B25137,
! B25138,
! B25193,
! B25194,
! B25197,
! B25198,
! B25199,
! B25200,
! B25201,
! B25202,
! B25203,
! B25204,
! B25205,
! B25206,
! B26193,
! B26194,
! B26195,
! B26196,
! B26197,
! B26198,
! B26200,
! B26201,
! B27035,
! B27080,
! B27193,
! B28035,
! B30193,
! B31192,
! B33001,
! B33004,
! B33043,
! B33044,
! B33047,
! B33048,
! B33049,
! B33051,
! B33052,
! B33053,
! B33054,
! B33191,
! B33192,
! B33193,
! B33194,
! B33195,
! B33196,
! B33197,
! B33198,
! B33199,
! B33200,
! B33201,
! B33202,
! B33203,
! B33204,
! B33205,
! B33206,
! B33207,
! B33208,
! B33209,
! B33210,
! B33211,
! B33212,
! B33213,
! B33214,
! B33215,
! B33216,
! B33217,
! B33218,
! B33219,
! B33220,
! B33221,
! B33222,
! B33223,
! B33224,
! B33225,
! B33226,
! B33227,
! B33228,
! B33229,
! B33230,
! B33231,
! B33232,
! B33233,
! B33234,
! B33236,
! B33237,
! B33238,
! B33239,
! B33240,
! B33241,
! B33242,
! B33243,
! B33244,
! B33245,
! B33246,
! B33247,
! B33248,
! B33249,
! B33250,
! B33251,
! B33252,
! B33253,
! B33254,
! B49193,
! B49194,
! B55003,
! B62190,
! B62191,
! B63190,
! B63191,
! B63192,
%%

dba_err dba_convert_vars(dba_varcode bufrex, dba_varcode* local)
{
	unsigned char query[2];
	struct varconv* info;
	query[0] = DBA_VAR_X(bufrex);
	query[1] = DBA_VAR_Y(bufrex);
	info = get_varconv(query, 2);
	/*
	fprintf(stderr, "INFO for B%02d%03d (\\x%02x\\x%02x) is %p %d\n",
		DBA_VAR_X(bufrex), DBA_VAR_Y(bufrex),
		query[0], query[1],
		info, info != NULL ? info->var : -1);
	*/
	if (info == NULL)
		*local = bufrex;
	else
		*local = info->var;
	return dba_error_ok();
}

/* vim:set ts=4 sw=4: */
