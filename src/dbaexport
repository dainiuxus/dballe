#!/usr/bin/python
# coding: utf-8
from __future__ import absolute_import
from __future__ import print_function
from __future__ import division
from __future__ import unicode_literals
import argparse
import logging
import os
import sys
try:
    import dballe
    HAS_DBALLE = True
except ImportError:
    HAS_DBALLE = False

log = logging.getLogger("main")

class CommandError(Exception):
    pass

def setup_logging(args):
    FORMAT = "%(levelname)s: %(message)s"
    if args.verbose:
        logging.basicConfig(level=logging.INFO, stream=sys.stderr, format=FORMAT)
    else:
        logging.basicConfig(level=logging.WARNING, stream=sys.stderr, format=FORMAT)

def get_db(args):
    if not args.dsn:
        dsn = os.environ.get("DBA_DB", "")
    else:
        dsn = args.dsn

    if not dsn:
        raise CommandError("Cannot find a database to connect to: --dsn is not specified and $DBA_DB is not set")

    elif dballe.DB.is_url(dsn):
        return dballe.DB.connect_from_url(dsn)
    else:
        return dballe.DB.connect(dsn, args.user, args.password)


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Export data from a DB-All.e database.')
    parser.add_argument("--dsn", type=str, metavar="dsn",
                        help="DSN, or URL-like database definition, to use for connecting to the DB-All.e database (can also be specified in the environment as DBA_DB)")
    parser.add_argument("--user", type=str, metavar="name",
                        help="username to use for connecting to the DB-All.e database")
    parser.add_argument("--pass", type=str, metavar="password", dest="password",
                        help="password to use for connecting to the DB-All.e database")
    parser.add_argument("--verbose",
                        help="verbose output")

    subparsers = parser.add_subparsers(dest="format", help="output formats")
    parser_csv = subparsers.add_parser("csv", help="export data as CSV")
    parser_csv.add_argument("query", nargs="+", metavar="key=val",
                            help="DB-All.e query to select data to export")

    args = parser.parse_args()

    try:
        setup_logging(args)

        if not HAS_DBALLE:
            raise CommandError("This command requires the dballe python module to run")

        db = get_db(args)

        print(args.query)
        print(args.format)
        #dd         (csv, R, bufr, crex, ...?)

        #exporter = dballe.dbacsv.export(db, query, sys.stdout)
    except CommandError as e:
        log.error("%s", e)
        sys.exit(1)
